name: Slack build and delpoy notification

on:
  workflow_call:
    inputs:
      channel:
        required: true
        type: string
      message_ts:
        required: false
        type: string
      status:
        required: true
        type: string
      app_name:
        required: true
        type: string
      deploy_to:
        required: true
        type: string
      version:
        required: true
        type: string
      build_number:
        required: true
        type: string
      changelog:
        required: false
        type: string
      # (Optional) Additional info about the build
      build_description:
        required: false
        type: string
      # (Optional) Encoded Firebase URL for the uploaded release
      encoded_release_url:
        required: false
        type: string
    secrets:
      SLACK_BOT_TOKEN:
        required: true

    outputs:
      ts:
        description: "Slack message ts"
        value: ${{ jobs.slack_notification.outputs.ts }}

jobs:
  slack_notification:
    name: Slack
    outputs:
      ts: ${{ steps.slack_message.outputs.ts }}
    runs-on: ubuntu-latest
    steps:
    - name: Prepare statuses
      id: statuses
      run: |
        if ${{ inputs.status == 'building' }}; then
          echo "status=ðŸ•‘ *Buildingâ€¦*" >> $GITHUB_OUTPUT
          echo "color=null" >> $GITHUB_OUTPUT
        elif ${{ inputs.status == 'deploying' }}; then
          echo "status=ðŸ•ž *Deployingâ€¦*" >> $GITHUB_OUTPUT
          echo "color=null" >> $GITHUB_OUTPUT
        elif ${{ inputs.status == 'success' }}; then
          echo "status=ðŸŸ¢ *Built and deployed*" >> $GITHUB_OUTPUT
          echo "color=green" >> $GITHUB_OUTPUT
        elif ${{ inputs.status == 'error' }}; then
          echo "status=ðŸ”´ *Error occured*" >> $GITHUB_OUTPUT
          echo "color=red" >> $GITHUB_OUTPUT
        fi

    - name: Prepare changelog
      id: changelog
      env:
        CHANGELOG: '${{ inputs.changelog }}'
        SLACK_MESSAGE_SECTION_MAX_LENGTH: 2950
      run: |
        # Fallback if there is no changelog info; e.g. when there is no Jira task associated with the branch
        if [[ "${CHANGELOG}" =~ ^[[:space:]]*$ ]]; then
          CHANGELOG="N/A"
        fi

        CHANGELOG="${CHANGELOG//\\/\\\\}"     # Escape backslashes (required by JSON format)
        CHANGELOG="${CHANGELOG//\"/\\\"}"     # Escape double quotes (required by JSON format)
        CHANGELOG="${CHANGELOG//$'\n'/'\n'}"  # Escape newlines (required by GA)
        CHANGELOG="${CHANGELOG//$'\r'/'\r'}"  # Escape carriage returns (required by GA)
        CHANGELOG="${CHANGELOG//$'\t'/'\t'}"  # Escape tabs (required by GA)

        # Slack API has a limit for the max length of the section, 3000 characters max, truncating if needed
        if [[ ${#CHANGELOG} -gt $SLACK_MESSAGE_SECTION_MAX_LENGTH ]]; then
          CHANGELOG="${CHANGELOG:0:$SLACK_MESSAGE_SECTION_MAX_LENGTH}\n(truncated)...'"
        fi

        echo "text=$CHANGELOG" >> $GITHUB_OUTPUT

    - name: Prepare build description
      id: build_description
      run: |
        BUILD_DESCRIPTION="N/A"

        if [[ -n "${{ inputs.build_description }}" ]]; then
          BUILD_DESCRIPTION="${{ inputs.build_description }}"
        fi

        BUILD_DESCRIPTION="${BUILD_DESCRIPTION//\\/\\\\}"     # Escape backslashes (required by JSON format)
        BUILD_DESCRIPTION="${BUILD_DESCRIPTION//\"/\\\"}"     # Escape double quotes (required by JSON format)
        BUILD_DESCRIPTION="${BUILD_DESCRIPTION//$'\n'/'\n'}"  # Escape newlines (required by GA)
        BUILD_DESCRIPTION="${BUILD_DESCRIPTION//$'\r'/'\r'}"  # Escape carriage returns (required by GA)
        BUILD_DESCRIPTION="${BUILD_DESCRIPTION//$'\t'/'\t'}"  # Escape tabs (required by GA)

        echo "text=$BUILD_DESCRIPTION" >> $GITHUB_OUTPUT

    - name: Decode Firebase release URL
      id: decode_release_url
      run: |
        ENCODED_RELEASE_URL="${{ inputs.encoded_release_url }}"

        if [[ -n "${ENCODED_RELEASE_URL}" ]]; then
          # Decoding string encoded twice using base64 encoding
          # See https://github.com/orgs/community/discussions/13082#discussioncomment-6776428 for details
          RELEASE_URL=$(echo "${ENCODED_RELEASE_URL}" | base64 --decode | base64 --decode)
        else
          # Fallback to the default value
          RELEASE_URL="https://appdistribution.firebase.google.com/testerapps"
        fi

        echo "release_url=$RELEASE_URL" >> $GITHUB_OUTPUT

    - id: slack_message
      uses: slackapi/slack-github-action@v1.23.0
      with:
        channel-id: "${{ inputs.channel }}"
        update-ts: "${{ inputs.message_ts }}"
        payload: |
          {
              "text": "${{ inputs.app_name }} â†’ ${{ inputs.deploy_to }}",
              "blocks": [
                  {
                      "type": "header",
                      "text": {
                          "type": "plain_text",
                          "text": "${{ inputs.app_name }} â†’ ${{ inputs.deploy_to }}",
                          "emoji": true
                      }
                  },
                  {
                      "type": "context",
                      "elements": [
                          {
                              "type": "mrkdwn",
                              "text": "${{ steps.statuses.outputs.status }}"
                          }
                      ]
                  },
                  {
                      "type": "section",
                      "fields": [
                          {
                              "type": "mrkdwn",
                              "text": "*Version:*\n${{ inputs.version }}"
                          },
                          {
                              "type": "mrkdwn",
                              "text": "*Build number:*\n${{ inputs.build_number }}"
                          },
                          {
                              "type": "mrkdwn",
                              "text": "*Commmit:*\n${{ github.sha }}"
                          }
                      ]
                  },
                  {
                      "type": "section",
                      "fields": [
                          {
                              "type": "mrkdwn",
                              "text": "*Branch:*\n${{ github.ref_name }}"
                          },
                          {
                              "type": "mrkdwn",
                              "text": "*Started by:*\n${{ github.actor }}"
                          }
                      ]
                  },
                  {
                      "type": "section",
                      "text": {
                          "type": "mrkdwn",
                          "text": "*Additional description:*\n${{ steps.build_description.outputs.text }}"
                      }
                  },
                  {
                      "type": "section",
                      "text": {
                          "type": "mrkdwn",
                          "text": "*Changelog:*\n${{ steps.changelog.outputs.text }}"
                      }
                  },
                  {
                      "type": "section",
                      "text": {
                          "type": "mrkdwn",
                          "text": "<${{ steps.decode_release_url.outputs.release_url }}|:calling: Install this release using Firebase>"
                      }
                  },
                  {
                      "type": "section",
                      "text": {
                          "type": "mrkdwn",
                          "text": "<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|:hammer_and_wrench: View this action on GitHub>"
                      }
                  }
              ]
          }
      env:
        SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN}}
