name: Build

on:
  workflow_call:
    inputs:
      # Stage will be passed to Fastlane to prepare the right build and sign it with the right certificate
      # Alpha - Alpha build, aka Feature build, is built from a feature branch and will be deployed to Google Distribution
      # Beta - Alpha build, aka Development build, is built from a develop branch and will be deployed to Google Distribution
      # RC - RC build is built from release branch and will be deployed to the application stores
      stage:
        required: true
        type: string
      # Version will be set to the app and will be shown in Google distribution, application store as well as inside the app.
      # Versions can be either semantic (like 1.2.0) or Jira task key (IOS-123)
      version:
        required: true
        type: string
      # Buld number must be unique and incremented every run
      build_number:
        required: true
        type: string
      # Name that will be used for the artifact
      filename:
        required: true
        type: string
      # Name that will be used for the artifact
      path:
        required: true
        type: string
      # Optional Xcode version override. Leave blank (default value) to use the default Xcode version;
      # Pass a custom value (e.g. '16.0', '10.2.1', '11 Beta 7', '11.2 GM seed', etc) to use a different Xcode version for the build
      xcode_version_override:
        type: string
      # Optional flag, set it to true if this workflow should use ARM64 runners only
      # Warning: reusable workflows receive ALL inputs as strings, matter their actual types (boolean in this case)
      arm_runners_only:
        required: false
        default: 'false'
        type: string
      # Optional flag, set it to true if the result binary should be analyzed
      # Warning: reusable workflows receive ALL inputs as strings, matter their actual types (boolean in this case)
      analyze_archive:
        required: false
        default: 'false'
        type: string

    secrets:
      # Optional secret, since not all builds are uploaded to the Firebase
      FIREBASE_APP_ID:
        required: false
      # Token must have read access to all the submodule repositories
      GH_MOBILE_PAT:
        required: true

jobs:
  build:
    name: Build
    runs-on: builder1
    environment: ${{ inputs.stage }}
    steps:
    # Various code-signing info, do not remove
    - name: Code signing debug output
      run: |
        echo "Codesigning identities:"$'\n'`security find-identity -p codesigning -v`
        echo "DVTDeveloperAccountManagerAppleIDLists content:"$'\n'`defaults read com.apple.dt.Xcode DVTDeveloperAccountManagerAppleIDLists`
        ls -ltrah ~/Library/MobileDevice/Provisioning\ Profiles || true
        ls -ltrah ~/Library/Developer/Xcode/UserData/Provisioning\ Profiles || true

    # Clean build folder. Since this job runs on a self-hosted runner build folder has to be cleaned manually.
    - name: Clean
      run: rm -rf *

    # Check out git repositories and submodules.
    - name: Checkout
      uses: actions/checkout@v3
      with:
        submodules: true
        token: ${{ secrets.GH_MOBILE_PAT }}

    - name: Checkout private-app-config if needed
      uses: actions/checkout@v3
      if: "${{ inputs.analyze_archive == 'true' }}"
      with:
        repository: tangem/private-app-config
        path: "./private-app-config"
        token: ${{ secrets.GH_MOBILE_PAT }}

    - name: Install required dependencies
      run: ./bootstrap.sh

    # Convert the runner name to upper case so it can be used to access repo variables
    - name: Convert runner name
      env:
        RAW_RUNNER_NAME: ${{ runner.name }}
      run: echo "UPPERCASED_RUNNER_NAME=$(echo ${RAW_RUNNER_NAME} | tr '[:lower:]' '[:upper:]')" >> $GITHUB_ENV

    # Build the app
    - name: Build
      run: |
        # The initialization of rbenv is required before every `bundle` call since Gihub Actions spawns each 'run' step in a separate process
        eval "$(rbenv init - bash)"

        bundle exec fastlane \
        build_${{ inputs.stage }} \
        build:"${{ inputs.build_number }}" \
        version:"${{ inputs.version }}" \
        path:"${{ inputs.path }}" \
        filename:"${{ inputs.filename }}" \
        firebase_app_id:"${{ secrets.FIREBASE_APP_ID }}" \
        xcode_version_override:"${{ inputs.xcode_version_override }}" \
        analyze_archive:"${{ inputs.analyze_archive }}" \
        code_sign_identity:"${{ vars[format('CODE_SIGN_ID_{0}', env.UPPERCASED_RUNNER_NAME)] }}"

    # Upload artifact to be able to reuse in the following jobs
    - name: Upload binary artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.filename }}
        path: "${{ inputs.path }}${{ inputs.filename }}"
        if-no-files-found: error
